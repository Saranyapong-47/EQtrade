import dotenv from "dotenv";
import { connectMongoDB } from "./mongodb.js"; // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ DB
import Crypto from "./Cryptomodel.js";
import infoCrypto from "./Stockmodel.js";
import axios from "axios";
import Stock from "./Stockmodel.js";

// üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô
async function updateStockPrice(stockSymbol) {
    try {
        let formattedSymbol = stockSymbol.toUpperCase();

        const searchResult = await yahooFinance.search(formattedSymbol);
        if (searchResult.quotes.length > 0) {
            formattedSymbol = searchResult.quotes[0].symbol;
        }

        const stockData = await yahooFinance.quote(formattedSymbol);
        if (!stockData || !stockData.regularMarketPrice) {
            console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô: ${formattedSymbol}`);
            return;
        }

        const percentChange = calculateChangePercentage(stockData.regularMarketPrice, stockData.regularMarketPreviousClose);

        console.log(`üìà ‡∏´‡∏∏‡πâ‡∏ô ${formattedSymbol} | ‡∏£‡∏≤‡∏Ñ‡∏≤: ${stockData.regularMarketPrice} ${stockData.currency} | ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á: ${percentChange.toFixed(2)}%`);

        await Stock.deleteOne({ symbol: formattedSymbol });
        await Stock.create({
            symbol: formattedSymbol,
            price: stockData.regularMarketPrice,
            high: stockData.regularMarketDayHigh,
            low: stockData.regularMarketDayLow,
            percentChange,
            currency: stockData.currency
        });

    } catch (error) {
        console.error(`‚ùå Error updating stock price for ${stockSymbol}:`, error.message);
    }
}



// üìå ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå
async function updateStockPriceSequentially() {
    const stockSymbols = ["AAPL", "TSLA", "GOOGL", "AMZN", "MSFT", "NFLX", "PTT", "SCB"];

    for (const stockSymbol of stockSymbols) {
        await updateStockPrice(stockSymbol);
        await new Promise(resolve => setTimeout(resolve, 2000)); // ‡πÄ‡∏ß‡πâ‡∏ô 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏ï‡πà‡∏≠‡∏´‡∏∏‡πâ‡∏ô
    }
}

// üìå ‡∏≠‡πà‡∏≤‡∏ô Command Line Argument
const args = process.argv.slice(2);
const command = args[0];
const symbol = args[1];

// üìå ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤
if (!command) {
    console.log(`
    ‚ùå ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‚ùå
    -----------------------------
    üìå ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ:
    node script.js price BTCUSDT   # ‡∏î‡∏π‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ñ‡∏£‡∏¥‡∏õ‡πÇ‡∏ï 1 ‡∏ï‡∏±‡∏ß
    node script.js stock AAPL      # ‡∏î‡∏π‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô 1 ‡∏ï‡∏±‡∏ß
    node script.js stock-realtime   # ‡∏î‡∏π‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå
    `);
    process.exit(0);
}
